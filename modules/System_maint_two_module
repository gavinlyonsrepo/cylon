#!/bin/bash
#module containing functions called from cylon package
#Functions networkFunc , checknetFunc intchkFunc

#FUNCTION HEADER
# NAME :   SystemMaintTwoFunc
# DESCRIPTION: provides network and security functions
function SystemMaintTwoFunc
{
	clear
	local choiceNVar=""
	while true; do
	msgFunc blue "System Maintenance options Two:-"
	local optionsNArr=("See wifi link quality continuously on screen" "$(checkPacFunc speedtest-cli  NOMES) -testing internet bandwidth"\
	"Check if website up with netcat and ping" "Display all interfaces which are currently available" "Display kernal routing table"\
	"Check the status of UFW, Uncomplicated Firewall" "Network Time Synchronization status check"\
	 "traceroute print route packets trace to network host" "tracepath traces path to a network host" "View all open ports " \
	 "Password generator" "List the password aging info of a user" "Audit SUID/SGID Files" "Return")
	select choiceNVar in "${optionsNArr[@]}"
		do
		case "$choiceNVar" in
			"${optionsNArr[0]}") #See link quality continuously on screen
					msgFunc norm "See wifi link quality continuously on screen"
					msgFunc norm "press ctrl + c to return"
					msgFunc anykey
					watch -n 1 cat /proc/net/wireless
			;;
					
			"${optionsNArr[1]}")  #speedtest-cli testing internet bandwidth

			local ServerIDVar=""			#check speedtest-cli  is installed
			if ! checkPacFunc speedtest-cli
			then
				msgFunc anykey 
			return
			fi
			
			msgFunc green "Speedtest-cli"
			#change dir for log files
			makeDirFunc "-NETINFO"
			msgFunc norm "Files report will be written to path above -"
			msgFunc norm "Do you want to generate server list [y/n] ?"
			if msgFunc yesno
			then # yes
				msgFunc green "List speedtest.net servers sorted by distance sent to file, cat top 20"
				speedtest-cli --list > stclilist
				head -n20 stclilist 
			fi		
			msgFunc norm "Do you want to specify a server ID [y/n] ?"
			if msgFunc yesno
			then #yes
				msgFunc norm "Enter Server ID from list"
				read -r ServerIDVar	
				#check integer
				intchkFunc "$ServerIDVar"
				clear
				speedtest-cli --server "$ServerIDVar" | tee stclilog
			else #no
				clear
				msgFunc green "Running Speedtest-cli "
				speedtest-cli  | tee stclilog
			fi
			;;
			
			"${optionsNArr[2]}")  #netcat 
			local websiteVar=""
			msgFunc norm "Enter website to check"
			read -r websiteVar
			msgFunc green "Check if website up with ping:"
			ping -c 10 "$websiteVar"
			msgFunc green "Check if website up with netcat:"
			msgFunc norm " "
			checkNetFunc "$websiteVar"
			msgFunc norm " "
			;;
			"${optionsNArr[3]}")  #ifconfig
				msgFunc green "ifconfig short list: Kernel Interface table:"
				#change dir for log files
				makeDirFunc "-NETINFO"
				msgFunc norm "Files report will be written to path above -"
				ifconfig -s
				msgFunc anykey
				msgFunc norm " "
				msgFunc green "ifconfig all + output to file:"
				ifconfig -a | tee ifconfiglog
				msgFunc anykey
			;;
			"${optionsNArr[4]}")  #display kernal routing table
				msgFunc green "netstat -r:"
				netstat -r 
				msgFunc green "route -n:"
				route  -n
				msgFunc anykey
			;;
			"${optionsNArr[5]}") #check firewall status
			if ! checkPacFunc ufw
			then
				msgFunc anykey 
			return
			fi
			sudo ufw status verbose
			;;
			"${optionsNArr[6]}") #Network Time Synchronization status check
				systemctl status systemd-timesyncd 
			;;
			"${optionsNArr[7]}") #traceroute - print the route packets trace to network host
					local trVar=""
					msgFunc green "traceroute - print the route packets trace to network host"
					msgFunc norm "Please enter network host name"
					read -r trVar
					traceroute "$trVar"
					msgFunc anykey
			;;
			"${optionsNArr[8]}") #tracepath
					local tpVar=""
					msgFunc green "traces path to a network host discovering MTU along this path"
					msgFunc norm "Please enter network host name"
					read -r tpVar
					tracepath "$tpVar"
			;;
			"${optionsNArr[9]}") #To view all open ports and the processes which opened them,
					msgFunc green "netstat -lunpt:"
					netstat -lunpt
					msgFunc anykey
			;;
			
			"${optionsNArr[10]}") #Password generator
				#password section
				makeDirFunc "-SYSSECURITY"
				msgFunc norm "Files report will be written to path above -"
				msgFunc green "Random Password generator"
				msgFunc norm "Enter length:-"
				read -r mylengthVar
				#if enter pressed set default 20
				if [ -z "$mylengthVar" ]; then
					mylengthVar=20
				fi
				#check integer
				intchkFunc "$mylengthVar"
				echo -n "$(< /dev/urandom tr -dc "_*?#!A-Z-a-z-0-9" | head -c"${1:-$mylengthVar}";)">pg
				msgFunc green "Password generated"
				msgFunc green "Done!"
			;;
			
			"${optionsNArr[11]}") # chage cmd list the passwd aging info
				local usrVar=""
				msgFunc green "chage command to list the password aging information of a user."
				msgFunc norm "Please enter user name"
				read -r usrVar
				sudo chage -l "$usrVar"
				msgFunc green "Done!"
				msgFunc anykey
			;;
			
			"${optionsNArr[12]}") #Auditing SUID/SGID Files
				makeDirFunc "-SYSSECURITY"
				msgFunc norm "Files report will be written to path above -"
				cat <<-EOF
				Since SUID/SGID files potentially make a system vulnerable, 
				the system administrator needs to keep track of these files
				SUID (Set owner User ID up on execution) = listSUID
				SGID (Set Group ID up on execution) = listSGID
				Sticky bit Set = listSBit
				EOF
				msgFunc green "Conducting Auditing outputting results to files"
				find / -perm -4000 -ls 2>/dev/null > listSUID
				find / -perm -2000 -ls 2>/dev/null >listSGID
				find / -perm -1000 -ls 2</dev/null > listSBit
				msgFunc green "Done!"
				msgFunc anykey
			;;
			*)  #exit  
				msgFunc green "Done!"	
				clear
			return
			;;
		esac
		break #comment out break to make menu loop
		done
	msgFunc green "Done!"	
	done
	
	
}

#FUNCTION HEADER
# NAME :  checkNetFunc 
# DESCRIPTION: checks network with netcat 
#INPUTS $1 a website URL
function checkNetFunc
{
#checks network with netcat 
#check netcat is installed
	if ! checkPacFunc gnu-netcat  
	then
		if ! checkPacFunc openbsd-netcat 
		then
			msgFunc yellow "Install gnu-netcat or openbsd-netcat for Network check"
			msgFunc anykey 
			exitHandlerFunc exitout
		fi
	fi
	#This uses netcat (nc) in its port scan mode, 
	#a quick poke (-z is zero-I/O mode [used for 
	#scanning]) with a quick timeout 
	#(-w 1 waits at most one second
	#It checks passed website $1 on port 80 (HTTP).
	if nc -zw1 "$1" 80; then
		msgFunc norm   "We have connectivity $1"
	else
		exitHandlerFunc netdown "$1"
	fi

}

#FUNCTION HEADER
# NAME :  intchkFunc
# DESCRIPTION: checks string if input integer 
#inputs integer $1
#outputs returns 0 if integer 1 if not calls errorhandler 
#called from rssFunc NetworkFunc and Password generator
function  intchkFunc
{
#source :http://mywiki.wooledge.org/BashFAQ/054
if [[ "$1" != *[!0-9]* ]]; 
then
	#integer
	return 0
else
	#not an integer
	exitHandlerFunc nonint
fi
}
