#!/bin/bash
#Module containing functions called from cylon package
#Functions: SystemMaintFunc  SystemMaintAutoFunc configFileScanFunc

#FUNCTION HEADER
# NAME :   SystemMaintFunc
# DESCRIPTION:carries out  maintenance checks  
# OUTPUTS : various output files 
# PROCESS : systemd , SSD trim , broken syslinks ,journalcontrol errors
#lostfiles check with lostfiles package, systemdanalysis boot, 
#NOTES :    needs lostfiles   installed       

function SystemMaintFunc
{
clear
local optionsSMArr=("Failed Systemd Services and status" "Check Journalctl log for Errors"\
		"Check Journalctl for fstrim SSD trim" "Analyze system boot-up performance"\
		"Check for Broken Symlinks" "Find files where no group or User corresponds to file's numeric ID"\
		"$(checkPacFunc lostfiles NOMES)" "Diskspace usage" "Find 200 of the biggest files" "Find inodes usage" "Old configuration files scan"\
		"Print sensors information" "Clean journal files"\
		"Delete core dumps /var/lib/systemd/coredump/" "Delete files"\
		"$(checkPacFunc bleachbit NOMES)"\
		"$(checkPacFunc rmlint NOMES)" "List All Open Files" "DMI table decoder"\
		"Return")
while true; do # loop until exit
	local choiceSMVar=""
	#change dir for log files
	msgFunc blue "System Maintenance options"
	select  choiceSMVar in "${optionsSMArr[@]}"
	do
	case  "$choiceSMVar" in
		"${optionsSMArr[0]}")
			# -systemd --failed:
			makeDirFunc "-SYSINFO"
			msgFunc green "Systemd status"
			msgFunc green "Done!"
			systemctl status > Systemdstatus
			msgFunc green "All Failed Systemd Services"
			systemctl --failed --all
			systemctl --failed --all > Systemderrlog
			msgFunc green "Done!"
			msgFunc green "All Failed Active Systemd Services"
			systemctl --failed
			systemctl --failed >> Systemderrlog
		;;
		"${optionsSMArr[1]}")
			# -Logfiles:
			msgFunc green "Check log Journalctl for Errors"
			makeDirFunc "-SYSINFO"
			journalctl -p 3 -xb > Journalctlerrlog
		;;

		"${optionsSMArr[2]}")
		#check if ssd trim functioning  ok in log
		#am I on a sdd drive? , 0 for SDD 1 for HDD from command
		local sdxVar=""
		sdxVar="$(df /boot/ --output=source | tail -1 | cut -c 6-8)"
		sdxVar=$(grep 0 /sys/block/"$sdxVar"/queue/rotational) 
		if [ "$sdxVar" = "0" ] 
			then
			msgFunc green "Check Journalctl for fstrim SSD trim"
			makeDirFunc "-SYSINFO"
			echo "SSD trim" > JournalctlerrSDDlog
			journalctl -u fstrim > JournalctlerrSDDlog
			else 
			msgFunc red "HDD detected no SSD trim check done"
		fi
		;;
	
		"${optionsSMArr[3]}")
			# systemd-analyze - Analyze system boot-up performance
			msgFunc green "Analyze system boot-up performance"
			makeDirFunc "-SYSINFO"
			{
			echo "Analyze boot-up performance"  
			systemd-analyze time 
			echo "CRITICAL-CHAIN" 
			systemd-analyze critical-chain 
			echo "BLAME" 
			systemd-analyze blame 
			} >>  systemdanalyzelog   
		;;
		"${optionsSMArr[4]}")
			#Checking for broken symlinks:
			msgFunc green "Checking for Broken Symlinks"
			makeDirFunc "-SYSINFO"
			#root or home?
			local choiceSYMVar=""
			msgFunc norm "Do you want to scan / or $HOME? [R/h]"
			read -r choiceSYMVar
			if [ "$choiceSYMVar" = "h" ]
			then
				find "$HOME" -type l -! -exec test -e {} \; -print > symlinkerr
			else
				find / -path /proc -prune -o -type l -! -exec test -e {} \; -print 2>/dev/null > symlinkerr
			fi
			msgFunc anykey 
		;;
	
		"${optionsSMArr[5]}")
			msgFunc green "Find files where no group or User corresponds to file's numeric user/group ID."
			makeDirFunc "-SYSINFO"
			find / -nogroup > filenogrouplog 2> /dev/null
			find / -nouser  > filenouserlog  2> /dev/null
		;;
		
		"${optionsSMArr[6]}")
		#check if lostfiles package  installed
			if ! checkPacFunc lostfiles
			then
				msgFunc anykey 
			return
			fi
			msgFunc green "Lostfiles :-Search for files which are not part of installed Arch Linux packages"
			makeDirFunc "-SYSINFO"
			msgFunc norm  "Lostfiles strict scan running, outputing to file"
			sudo bash -c "lostfiles -sz  > lostfilesStrictlist.txt" 
			msgFunc green "Done!"
			msgFunc norm  "Lostfiles relaxed scan running, outputing to file"
			sudo bash -c  "lostfiles -z > lostfilesRelaxedlist.txt" 
		;;
	
		"${optionsSMArr[7]}")
		msgFunc green "Diskspace usage"
			# This is useful for finding out what is taking so much space on your drives!
			makeDirFunc "-SYSINFO"
			msgFunc norm "Do you want to scan / or $HOME? [R/h]"
			local choiceDUVar=""
			read -r choiceDUVar
			if [ "$choiceDUVar" = "h" ]
			then
				du -H "$HOME" 2> /dev/null | sort -n -r >> diskspace
			else
				du -H / 2> /dev/null | sort -n -r >> diskspace
			fi
			
		;;
		"${optionsSMArr[8]}") #find files
			msgFunc green "Find 200 of the biggest files"
			makeDirFunc "-SYSINFO"
			find / -type f -exec du -Sh {} + 2>/dev/null | sort -rh | head -n 200 > filesortsize
		;;
		"${optionsSMArr[9]}") #inodes
			msgFunc green "Find inodes usage"
			makeDirFunc "-SYSINFO"
			df -ih | grep sd.
			msgFunc norm "Output list to fileinodescan"
			du / -Sh --inodes 2>/dev/null | sort -nr | head -2000 >fileinodescan
		;;
		"${optionsSMArr[10]}") #old config files
			msgFunc green "Old configuration files scan"
			makeDirFunc "-SYSINFO"
			configFileScanFunc
		;;
		"${optionsSMArr[11]}")
			msgFunc green "Print sensor information"
			sensors
		;;
		"${optionsSMArr[12]}")
			msgFunc green "Clean journalctl files(systemd logging system)"
			msgFunc norm "Remove archived journal files until the disk space they use falls "
			msgFunc norm "below 100M: press y or any other key to quit [y/n] ?"
			if msgFunc yesno
			then #yes
				sudo journalctl --vacuum-size=100M
			else
				return
			fi
		;;
		"${optionsSMArr[13]}")
			msgFunc green "Delete core dumps /var/lib/systemd/coredump/"
			sudo rm -rvf /var/lib/systemd/coredump/*
		;;
		"${optionsSMArr[14]}")  # delete folders /files
			SystemCleanFunc "FOLDERS"
		;;
		
		"${optionsSMArr[15]}") #system clean with bleachbit
			SystemCleanFunc
		;;
		"${optionsSMArr[16]}") #rmlint 
			RmLintFunc
		;;
		"${optionsSMArr[17]}")  #  List All Open Files
			find /proc/*/fd -xtype f -printf "%l\n" 2>/dev/null |grep -v " (deleted)$"| sort -u 
		;;
		
		"${optionsSMArr[18]}")  #   DMI table decoder
			makeDirFunc "-SYSINFO"
			sudo dmidecode  | tee demidecodeoutput
		;;
		
		*)#quit
			msgFunc green "Done!"
			clear
			return
		;;
		
	esac
	break
	done
msgFunc green "Done!"	
msgFunc anykey 
clear
done
}

#FUNCTION HEADER
# NAME :           SystemMaintAutoFunc
# DESCRIPTION:carries out most of the maintenance checks done by  
#SystemMaintFunc BUT in one auto pass as opposed to menu selection 
#run by cylon -m
# OUTPUTS : various output files 
# PROCESS : systemd , SSD trim , broken syslinks ,journalcontrol errors
#lostfiles check with lostfiles package, systemdanalysis boot, 
#NOTES :    needs lostfiles   installed       
function SystemMaintAutoFunc
{
clear 
			#change dir for log files
			makeDirFunc "-SYSINFOAUTO"
			msgFunc norm "Files report will be written to path above -"
			msgFunc green "System Maintenance Scan"
			
			# -systemd --failed:
			msgFunc green "Systemd status"
			msgFunc green "Done!"
			systemctl status > Systemdstatus
			msgFunc green "All Failed Systemd Services"
			systemctl --failed --all
			systemctl --failed --all > Systemderrlog
			msgFunc green "Done!"
			msgFunc green "All Failed Active Systemd Services"
			systemctl --failed
			systemctl --failed >> Systemderrlog
			
			# -Logfiles:
			msgFunc green "Check log Journalctl for Errors"
			journalctl -p 3 -xb > Journalctlerrlog
			
			#check if ssd trim functioning  ok in log
			#am I on a sdd drive? , 0 for SDD 1 for HDD from command
				local sdxVar=""
				sdxVar="$(df /boot/ --output=source | tail -1 | cut -c 6-8)"
				sdxVar=$(grep 0 /sys/block/"$sdxVar"/queue/rotational) 
					if [ "$sdxVar" = "0" ] 
						then
						msgFunc green "Check Journalctl for fstrim SSD trim"
						echo "SSD trim" > JournalctlerrSDDlog
						journalctl -u fstrim > JournalctlerrSDDlog
						else 
						msgFunc red "HDD detected no SSD trim check done"
					fi
					
			# systemd-analyze - Analyze system boot-up performance
			msgFunc green "Analyze system boot-up performance"
			{
			echo "Analyze boot-up performance"  
			systemd-analyze time 
			echo "CRITICAL-CHAIN" 
			systemd-analyze critical-chain 
			echo "BLAME" 
			systemd-analyze blame 
			} >>  systemdanalyzelog
			
			#Checking for broken symlinks:
			msgFunc green "Checking for Broken Symlinks"
			#root or home?
			msgFunc norm "Do you want to scan / or $HOME? [R/h]"
			local choiceSYMVar=""
			read -r choiceSYMVar
			if [ "$choiceSYMVar" = "h" ]
			then
				find "$HOME" -type l -! -exec test -e {} \; -print > symlinkerr
			else
				find / -path /proc -prune -o -type l -! -exec test -e {} \; -print 2>/dev/null > symlinkerr
			fi
			#files
			msgFunc green "Find 200 of the biggest files"
			find / -type f -exec du -Sh {} + 2>/dev/null | sort -rh | head -n 200 > filesortsize
			#inodes
			msgFunc green "Find inodes usage"
			du / -Sh --inodes 2>/dev/null | sort -nr | head -2000 >fileinodescan
			#Find files where no group or User corresponds to file's numeric user/group ID.
			msgFunc green "Find files where no group or User corresponds to file's numeric user/group ID."
			find / -nogroup > filenogrouplog 2> /dev/null
			find / -nouser  > filenouserlog  2> /dev/null
			
			#check if lostfiles package installed
			if ! checkPacFunc lostfiles
			then
				msgFunc anykey 
			return
			fi
			msgFunc green "Lostfiles :-Search for files which are not part of installed Arch Linux packages"
			msgFunc norm  "Lostfiles strict scan running, outputing to file"
			sudo bash -c "lostfiles strict  > lostfilesStrictlist.txt" 
			msgFunc green "Done!"
			msgFunc norm  "Lostfiles relaxed scan running, outputing to file"
			sudo bash -c  "lostfiles relaxed > lostfilesRelaxedlist.txt" 
			
			msgFunc green "diskspace usage"
			msgFunc norm "Do you want to scan / or $HOME? [R/h]"
			local choiceDUVar=""
			read -r choiceDUVar
			if [ "$choiceDUVar" = "h" ]
			then
				du -H "$HOME" 2> /dev/null | sort -n -r >> diskspace
			else
				du -H / 2> /dev/null | sort -n -r >> diskspace
			fi
			msgFunc anykey 
			
			msgFunc green "Old configuration files scan"
			configFileScanFunc
			
			msgFunc green "All Done!"	
			msgFunc anykey 
			clear
}

#FUNCTION HEADER
# NAME :  configFileScanFunc
# DESCRIPTION: Old configuration files scan see below text
function configFileScanFunc
{

cat <<-EOF
Old configuration files may conflict with newer software versions,
or corrupt over time. Remove unneeded configurations periodically, 
This option will scan three folders and compare names of dirs with
names of installed packages and output result to files.
~/.config/ -- where apps stores their configuration
~/.cache/ -- cache of some programs may grow in size
~/.local/share/ -- old files may be lying there
The user can then inspect these files and remove anything unwanted.
EOF
	msgFunc anykey
	local configArr=()
	local cacheArr=()
	local homeArr=()
	#populate arrays
	mapfile -t configArr < <(find "$HOME/.config" -maxdepth 1 -type d  | awk -F"/" '{print $5}')
	mapfile -t cacheArr < <(find "$HOME/.cache" -maxdepth 1 -type d  | awk -F"/" '{print $5}')
	mapfile -t homeArr < <(find "$HOME/.local/share" -maxdepth 1 -type d  | awk -F"/" '{print $6}')
	#sort arrays
	IFS=$'\n' configArr=($(sort <<<"${configArr[*]}"))
	unset IFS
	IFS=$'\n' cacheArr=($(sort <<<"${cacheArr[*]}"))
	unset IFS
	IFS=$'\n' homeArr=($(sort <<<"${homeArr[*]}"))
	unset IFS
	# get length of an array
	tLen="${#configArr[@]}"
	tLen1="${#cacheArr[@]}"
	tLen2="${#homeArr[@]}"
	
	# use for loop read all installed packages 
	msgFunc green "$HOME/.config/ -- where apps stores their configuration"
	for (( i=0; i<"${tLen}"; i++ ));
	do
			if  checkPacFunc "${configArr[i]}" 
			then
					unset "configArr[i]"
			fi
	done
	msgFunc anykey
	printf "%s\n" "${configArr[@]}" > HOMECONFIGfile
	
	# use for loop read all installed packages
	msgFunc green " $HOME/.cache/ -- cache of some programs may grow in size"
	for (( i=0; i<"${tLen1}"; i++ ));
	do
			if  checkPacFunc "${cacheArr[i]}" 
			then
					unset "cacheArr[i]"
			fi
	done
	msgFunc anykey
	printf "%s\n" "${cacheArr[@]}" > HOMECACHEfile 
	
	# use for loop read all installed packages
	msgFunc green "$HOME/.local/share/ -- old files may be lying there"
	for (( i=0; i<"${tLen2}"; i++ ));
	do
			if  checkPacFunc "${homeArr[i]}" 
			then
					unset "homeArr[i]"
			fi
	done
	printf "%s\n" "${homeArr[@]}" > HOMELOCALSHAREfile
}
