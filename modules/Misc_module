#!/bin/bash
#shellcheck disable=SC1117
#Module containing functions called from cylon package
#
#Functions: checkinputFunc, DisplayFunc. AsciiArtFunc
# exitHandlerFunc, HelpFunc, msgFunc, readconfigFunc, makeDirFunc drawBox

#FUNCTION HEADER
# NAME : msgFunc
# DESCRIPTION :   prints to screen
#prints line, text and anykey prompts, yesno prompt
# INPUTS : $1 process name $2 text input
# PROCESS :[1]  print line [2] anykey prompt
# [3] print text  "green , red ,blue , norm yellow" [4] yn prompt, 
# OUTPUT yesno prompt return 1 or 0
function msgFunc
{
	
	case "$1" in 
	
		line) #print blue horizontal line of =
			printf '\033[36;1m%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =
			printf '%s' "${NORMAL}"
		;;
		anykey) #any key prompt, appends second text input to prompt
		    printf '%s' "${GREEN}" 
			read -n 1 -r -s -p "Press any key to continue $2"
			printf '%s\n' "${NORMAL}"
		;;
		
		#print passed text string
		green) printf '%s\n' "${GREEN}$2${NORMAL}" ;;
		red) printf '%s\n' "${RED}$2${NORMAL}" ;;
		blue) printf '%s\n' "${BLUE}$2${NORMAL}" ;;
		yellow)printf '%s\n' "${YELLOW}$2${NORMAL}" ;;
		norm) printf '%s\n' "${NORMAL}$2" ;;
			
		yesno) #print yes no quit prompt
			local yesnoVar=""
			while true; do
				read -r yesnoVar
				case $yesnoVar in
					[Yy]*) return 0;;
					[Nn]*) return 1;;
					[Qq]*) exitHandlerFunc exitout;;
					*) printf '%s\n' "${YELLOW}Please answer: (y/Y for yes) OR (n/N for no) OR (q/Q to quit)!${NORMAL}";;
				esac
			done
		;;
		*) 
			printf '%s\n' "ERROR unknown input to msgFunc"
			 ;;
	esac
}


#FUNCTION HEADER
# NAME :  exitHandlerFunc 
# DESCRIPTION: error handler deal with user 
#exits and path not found errors and internet failure 
# INPUTS:  $2 text of internet site down or filename 
# PROCESS : exitout paths netdown or file error or non-integer user input.
# or bad argument option input
function exitHandlerFunc
{
case "$1" in
	"$CYLONDEST") 
		msgFunc red "Path not found to Destination directory"
		msgFunc norm "$CYLONDEST" 
	;;
	"$CYLON_CONFIG") 
		msgFunc red "Path not found to Destination directory"
		msgFunc norm "$CYLON_CONFIG" 
	;;
	"$CYLON_DOCUMENTS") 
		msgFunc red "Path not found to Destination directory"
		msgFunc norm "$CYLON_DOCUMENTS" 
	;;
	UnknownPath) msgFunc red "Path not found to directory" ;;
	netdown) msgFunc red "Internet connectivity test to $2 failed" ;;
	fileerror) msgFunc red "File error $2"  ;;
	nonint) msgFunc red "Integer expected, user entered non-integer, program exiting";;
	Badinput)
		msgFunc red "$2 is an INVALID USER OPTION!"
		msgFunc yellow "Usage: -b -c -d -h -l -m -n -p -r -s -u -v -z"
		msgFunc yellow "Type cylon -h for display readme.md or" 
		msgFunc yellow "Type man cylon for manpage"
		msgFunc norm " "
		msgFunc norm  "Do you wish to view man page section for user options now? [y/n]"
		if msgFunc yesno 
		then  # yes
			man cylon | grep -A39 OPTIONS 
		fi
		;;
	exitout) msgFunc norm "";;
	*) msgFunc yellow "Error Unknown input to error handler";;
esac
msgFunc yellow "Goodbye $USER!"
msgFunc anykey "and exit."
if [ "$1" = "exitout" ]
then
	#non-error exit
	exit 0
fi 
exit 2
}

#FUNCTION HEADER
# NAME : DisplayFunc
# DESCRIPTION : Function to display main menu
function DisplayFunc
{
msgFunc blue "Main Menu:"
	local choiceMainVar
	local optionsMArr=(
	"pacman" "$(checkPacFunc auracle NOMES)" \
	"$(checkPacFunc trizen NOMES)" "System Update"  \
	"System Maintenance" "System Maintenance Two" \
	"View/Edit config file"\
	  "System information" "Cylon information" "Exit"\
	)
	select choiceMainVar in "${optionsMArr[@]}"
	do
	case "$choiceMainVar" in
			"${optionsMArr[0]}")   #pacman update
				PacmanFunc
			;;
			"${optionsMArr[1]}") #auracle AUR helper
				AuraFunc
			;;
			"${optionsMArr[2]}") #trizen AUR helper
				trizenFunc
			;;
			"${optionsMArr[3]}") #full system update.
				updateFunc
			;;
			"${optionsMArr[4]}") #system maintenance
				SystemMaintFunc 
			;;
			"${optionsMArr[5]}")  # system maintenance two
				SystemMaintTwoFunc 
			;;
			"${optionsMArr[6]}")   #config file edit or view
				readconfigFunc "USERCALL"
			;;
			"${optionsMArr[7]}") #system info
				HelpFunc "SYS"
			;;
			"${optionsMArr[8]}")  # cylon info and cat readme file to screen 
				HelpFunc "HELP"
			;;
			*)#exit
				exitHandlerFunc exitout 
			;;
	esac
	break
	done

}

#FUNCTION HEADER
# NAME :            HelpFunc
# DESCRIPTION :     two sections one prints various system information the
# other cylon information and the installed readme file
# INPUTS : $1 process name either HELP or SYS    
# OUTPUTS : n/a
# PROCESS :[1] HELP =cylon info [2] SYS   =system info
function HelpFunc 
{
clear
	if [ "$1" = "HELP" ]
		then
		msgFunc line
		AsciiArtFunc "CYLON"
		msgFunc line
		#Program details print
		cat <<-EOF
		Cylon is an Arch Linux maintenance CLI program written in Bash script.
		This program provides numerous tools to Arch Linux users to carry 
		out updates, maintenance, system checks and more. 
		EOF
		msgFunc norm "Written by G.Lyons, Reports to  <glyons66@hotmail.com>"
		msgFunc norm "AUR package name = cylon, at aur.archlinux.org by glyons."
		msgFunc norm "Version=$(pacman -Qs cylon | head -1 | cut -c 7-20)"
		msgFunc norm "Cylon program location = $(which cylon)"
		msgFunc norm "Cylon modules for functions = /usr/lib/cylon/modules/*"
		msgFunc norm "Folder for Cylon output data = $CYLONDEST"
		msgFunc norm "Location of cylonCfg.conf = $CYLON_CONFIG"
		msgFunc norm "Location of readme.md changlog.md = $CYLON_DOCUMENTS"
		msgFunc norm "Location of License.md = /usr/share/licenses/cylon"
		msgFunc norm "Man page, Desktop entry and icon also installed"
		if [ -z "${CYLONDEST}" ]
		then 
			msgFunc red "No Cache file path found"
		else 
			msgFunc norm "Cache file path is set to $CYLONDEST"
		fi
		
		if [ -z "${CYLON_CONFIG}" ]
		then 
			msgFunc red "No Config file path found"
		else 
			msgFunc norm "Config path is set to $CYLON_CONFIG"
		fi
		
			if [ -z "${CYLON_COLOR_OFF}" ]
		then 
			msgFunc norm "Environment variable CYLON_COLOR_OFF is not Set"
		else 
			msgFunc norm "Environment variable CYLON_COLOR_OFF is set to $CYLON_COLOR_OFF"
		fi
		msgFunc anykey "and check which dependencies are installed"
		clear
		msgFunc norm " "
		msgFunc green "Dependencies"
		#create array to hold Dependencies
		local DependenciesArr=("dialog:NOTE non-optional" "expac:NOTE non-optional" "auracle:NOTE AUR package" \
"trizen:NOTE AUR package" "lostfiles" "arch-audit" "rmlint" \
"gnu-netcat:NOTE No need if using openbsd-netcat" "openbsd-netcat:NOTE No need if using gnu-netcat" \
 "bleachbit" "libnotify" )
		#loop thru and display the array
		local tLenVar=""
		local packageVar=""
		local noteVar=""
		tLenVar="${#DependenciesArr[@]}" #length of array
		for (( i=0; i<"${tLenVar}"; i++ ));
		do
			#Does the string have a NOTE in it if yes parse note to noteVar?
			if [[ "${DependenciesArr[i]}" == *"NOTE"* ]]; then
				#extract from this string using parameter expansion 
				packageVar=${DependenciesArr[i]%:*} #retain before the colon
				noteVar=${DependenciesArr[i]##*:} #retain after the colon
				checkPacFunc "$packageVar" "$noteVar"
			else
				checkPacFunc "${DependenciesArr[i]}"
			fi
		done
		
		msgFunc green "Do you want to view readme file [y/n] ?"
		if msgFunc yesno
			then #yes
				msgFunc line
				msgFunc green "Displaying cylon Readme.md file at $CYLON_DOCUMENTS"
				cd "$CYLON_DOCUMENTS"  || exitHandlerFunc CYLON_DOCUMENTS
				less Readme.md 
				msgFunc green "Done!" 
				msgFunc line
				msgFunc anykey
		fi
		msgFunc norm " "
		
		msgFunc green "Do you want to view Packages files list generator help file [y/n] ?"
		if msgFunc yesno
			then #yes
				msgFunc line
				msgFunc green "Displaying package_lists.md file at $CYLON_DOCUMENTS"
				cd "$CYLON_DOCUMENTS"  || exitHandlerFunc CYLON_DOCUMENTS
				less package_lists.md
				msgFunc green "Done!" 
				msgFunc line
				msgFunc anykey
		fi
		clear
		return
	fi

# SYS system information section page 1
msgFunc green "System Information display Page 1"
msgFunc norm "Uptime = $(uptime -p)"
msgFunc norm "Kernel = $(uname -svr)"
msgFunc norm "Operating System = $(uname -mo)"
msgFunc norm "Network node name = $(uname -n)"
msgFunc norm "User name = $USER"
msgFunc norm "Shell = $SHELL"
if type -p xrandr >/dev/null; then
	msgFunc norm "Screen Resolution = $(xrandr |grep "\*" | cut -c 1-15)"  2>/dev/null
elif type -p xdpyinfo >/dev/null; then
	msgFunc norm "Screen Resolution = $(xdpyinfo | awk -F '[ x]+' '/dimensions:/{print $3}') x $(xdpyinfo | awk -F '[ x]+' '/dimensions:/{print $4}')"
fi
msgFunc norm "CPU = $(grep name /proc/cpuinfo | tail -1| cut -d ":" -f 2)"
local memArr=($(awk -F ':| kB' '/MemTotal|MemAvail/ {printf $2}' /proc/meminfo))
local memusedVar="$((memArr[0] - memArr[1]))"
memusedVar="$((memusedVar / 1024))"
local memtotalVar="$((memArr[0] / 1024))"
local memoryVar="${memusedVar}MB / ${memtotalVar}MB"
msgFunc norm "RAM used/total = ($memoryVar)"
msgFunc norm "Editor variable = $EDITOR"
# Get and display cachedir size read cachedir variable from file
local CacheDirVar=""
source /etc/pacman.conf 2>/dev/null
if [ -z "${CacheDirVar}" ]
then
	#if not set , set to expected default
	CacheDirVar=/var/cache/pacman/pkg/
fi
msgFunc norm "Pacman cache = $CacheDirVar"
msgFunc norm "Space used by pkg downloaded in cache: $(du -sh "$CacheDirVar" 2>/dev/null|awk '{print $1}'
)"
msgFunc norm "Hold packages: $(grep "HoldPkg" /etc/pacman.conf | cut -d "=" -f 2 )"
msgFunc norm "Number of orphan packages not required as dependencies: $(pacman -Qtdq | wc -l)"

#system information section page 2
msgFunc green "Do you want to display System information page 2? [y/n]"
if msgFunc yesno
	then #yes 
	clear
	msgFunc green "System information page 2"
	msgFunc norm "All installed packages: $(pacman -Q | wc -l)" 
	msgFunc norm "All native packages: $(pacman -Qn | wc -l)" 
	msgFunc norm "All explicitly installed packages: $(pacman -Qe | wc -l)" 
	msgFunc norm "All explicitly installed native packages that are"
	msgFunc norm "not direct or optional dependencies: $(pacman -Qqent | wc -l)"
	msgFunc norm "All foreign installed packages: $(pacman -Qm | wc -l)"
	msgFunc norm "All foreign explicitly installed packages: $(pacman -Qme | wc -l)"
	msgFunc norm "All packages installed as dependencies: $(pacman -Qd | wc -l) "
	msgFunc norm "5 Largest packages :"
	expac -H M '%m\t%n' | sort -hr |head -5
	msgFunc norm "5 Newest updated packages :"
	expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort -hr |head -5 
fi

#system information section page 2
msgFunc green "Do you want to display System information page 3? [y/n]"
if msgFunc yesno
then
	#yes 
	clear
	msgFunc green "System information page 3"
	msgFunc norm "Packages Count by repositories:-"
	msgFunc norm "Core: $(paclist core | wc -l)"
	msgFunc norm "Extra: $(paclist extra | wc -l)"
	msgFunc norm "Multilib: $(paclist multilib | wc -l)"
	msgFunc norm "Foreign: $(pacman -Qm | wc -l)"
	msgFunc norm "Total: $(pacman -Q | wc -l)"
	msgFunc norm " "
	msgFunc norm "Packages Installed size by repositories:-"
	msgFunc norm "Core: $(pacman -Qi  $(paclist core | awk '{print $1}' ) | awk '/Installed Size/ {if ($5=="MiB") {sum+=$4} else if ($5=="KiB") {sum+=($4/1024)}} END {print sum " MiB"}')"
	msgFunc norm "Extra: $(pacman -Qi $(paclist extra | awk '{print $1}' ) | awk '/Installed Size/ {if ($5=="MiB") {sum+=$4} else if ($5=="KiB") {sum+=($4/1024)}} END {print sum " MiB"}')"
	if [ "$(paclist multilib | wc -l)" != "0" ]
	then
		msgFunc norm "Multilib: $(pacman -Qi $(paclist multilib | awk '{print $1}' ) | awk '/Installed Size/ {if ($5=="MiB") {sum+=$4} else if ($5=="KiB") {sum+=($4/1024)}} END {print sum " MiB"}')"
	fi
	msgFunc norm "Foreign: $(pacman -Qi $(pacman -Qmq ) | awk '/Installed Size/ {if ($5=="MiB") {sum+=$4} else if ($5=="KiB") {sum+=($4/1024)}} END {print sum " MiB"}')"
	msgFunc norm "Total: $(pacman -Qi  | awk '/Installed Size/ {if ($5=="MiB") {sum+=$4} else if ($5=="KiB") {sum+=($4/1024)}} END {print sum " MiB"}')"
	msgFunc anykey
fi

clear
}

#FUNCTION HEADER
# NAME :           readconfigFunc
# DESCRIPTION:read the config file into program if not there   
#use hardcoded defaults
#Called when needed by program also can be called by user option or main menu
# passed USERCALL
# INPUTS $1 USERCALL when called by user
# PROCESS : read $CYLON_CONFIG/cylonCfg.conf
function readconfigFunc
{
#check input if called by user from menu or option
if [ "$1" = "USERCALL" ]
	then
	cd "$CYLON_CONFIG"  || exitHandlerFunc "$CYLON_CONFIG"
	if [ -f "$CYLON_CONFIG/cylonCfg.conf" ] 
		then
			local choiceCCVar
			msgFunc green "Do you want to edit or view? [e/V]"
			read -r choiceCCVar
			if [ "$choiceCCVar" = "e" ]
				then
					$EDITOR "$CYLON_CONFIG/cylonCfg.conf" || exitHandlerFunc fileerror "$CYLON_CONFIG/cylonCfg.conf"
					clear
					msgFunc green "Exiting config file edit option"
					msgFunc anykey "and exit cylon."
					exit 0
				else
				msgFunc green  "Custom paths read from file"
				cat "$CYLON_CONFIG/cylonCfg.conf" || exitHandlerFunc fileerror "$CYLON_CONFIG/cylonCfg.conf"
				msgFunc green "Done!"
				msgFunc anykey
				return
			fi
		else
			exitHandlerFunc fileerror "$CYLON_CONFIG/cylonCfg.conf"
	fi
fi

# Read config file at start-up 
cd "$CYLON_CONFIG"  || exitHandlerFunc "$CYLON_CONFIG"

if [ ! -f "$CYLON_CONFIG/cylonCfg.conf" ];then
	msgFunc yellow "No config file found: ..."
	msgFunc norm "$CYLON_CONFIG"
	touch "$CYLON_CONFIG/cylonCfg.conf" && echo "File made"
	echo "CYLON_RSS_NUM=2" | tee -a "$CYLON_CONFIG/cylonCfg.conf"
	echo "CYLON_RSS_URL=\"https://archlinux.org/feeds/news/\"" | tee -a "$CYLON_CONFIG/cylonCfg.conf"
	echo "CYLON_UPDATE_CHOICE=1" | tee -a "$CYLON_CONFIG/cylonCfg.conf"
	msgFunc anykey 
fi

# shellcheck disable=SC1091
source ./cylonCfg.conf || exitHandlerFunc fileerror "$CYLON_CONFIG/cylonCfg.conf"
}

#FUNCTION HEADER
# NAME :           checkinputFunc
# DESCRIPTION:CHECK INPUT OPTIONS from linux command line arguments passed to program on call
# INPUTS :  $1 user input option
# see readme and man page for output options
function checkinputFunc
{
case "$1" in
	"");;
	-u|--update) #update system report 
		updateFunc
	;;
	-c|--config)
		readconfigFunc "USERCALL"
		;;
	-d|--default)
#Bleachbit system clean. Use the options set in the GUI
		msgFunc green "Bleachbit system clean"  
		msgFunc norm "Preset options see $HOME/.config/bleachbit/ or GUI "
		msgFunc anykey "To run bleachbit -c --preset"
		msgFunc norm  "Running bleachbit -c --preset"
		bleachbit -c --preset
		msgFunc green "Done!"
		;;
	-v|--version)
		AsciiArtFunc "CYLON"
		msgFunc norm " "
		msgFunc norm "$(pacman -Qs cylon)" 
		;;
	-s|--system)
		HelpFunc SYS
		;;
	-h|--help)
		HelpFunc HELP
		;;
	-b|--bleachbit)
		while true; do
			SystemCleanFunc
			msgFunc anykey
		done
	;;
	-m|--maint)
		SystemMaintAutoFunc
		msgFunc green "DONE!"
		msgFunc anykey
	;;
	-p|--print)
		pkglistFunc
	;;
	-r|--rss)
		RssFunc 
	;;
	-z|--delete)
		DelQmFunc
	;;
	-l|--lint)
		RmLintFunc
	;;
	-n| --notify)
		notifyFunc
	;;
	
	*)	clear
		exitHandlerFunc Badinput "$1"
	;;
esac
# Was there a input if yes quit?
if [ -n "$1" ] 
	then
		exit 0 
fi
clear
}

#FUNCTION HEADER
# NAME : makeDirFunc
# DESCRIPTION :  makes a directory with time/date stamp and enters it
#Directory used for program output. 
# INPUTS : $1 text is appended to name  $2 bit flag  to change dir or not
function makeDirFunc
{
	local dirVar=""
	#makes dirs for output appends passed text to name
	cd "$CYLONDEST" || exitHandlerFunc "$CYLONDEST" 
	dirVar=$(date +%d%b%y-%H%M)"$1"
	mkdir -p "$dirVar"
	cd "$dirVar" || exitHandlerFunc UnknownPath
	msgFunc norm "Directory for output made at:-"
	pwd	 
}

#FUNCTION HEADER
# NAME :  AsciiArtFunc
# DESCRIPTION:display asciiArt
# INPUTS : $1 text to pick art
function AsciiArtFunc
{
if [ "$1" = "ARCH" ]
then
	msgFunc green "                           _         _        _                         "
	msgFunc green "     /\                   | |       | |      (_)                        "
	msgFunc green "    /  \     _ __    ___  | |__     | |       _   _ __    _   _  __  __ "
	msgFunc green "   / /\ \   | '__|  / __| | '_ \    | |      | | | '_ \  | | | | \ \/ / "
	msgFunc green "  / ____ \  | |    | (__  | | | |   | |____  | | | | | | | |_| |  >  <  "
	msgFunc green " /_/    \_\ |_|     \___| |_| |_|   |______| |_| |_| |_|  \__,_| /_/\_\ "
elif [ "$1" = "CYLON" ]
then
		msgFunc blue "_______ __   __         _____  __   _"
		msgFunc blue "|         \_/   |      |     | | \  |"
		msgFunc blue "|_____     |    |_____ |_____| |  \_|"
fi
}

# FUNCTION HEADER
# NAME :  drawBoxFunc
# DESCRIPTION: draw a box around text , used in title on main menu page
function drawBoxFunc
{ 
		local width
		local place
		local textarray=("$@") 
		
		#${s[@]} – all elements of array s; ((width<${#l})) – ((..)) shell arithmetic testing 
		#whether variable width's value is less than variable l value's length, obtained
		#with parameter expansion (# – string length); ${place//?/-} – parameter expansion  
		#replacing all occurrences of any character with a “-” (// – replace all; ? – 
		#wildcard meaning any character). 
		for word in "${textarray[@]}"; do
			((width<${#word})) && { place="$word"; width="${#word}"; }
		done
		tput setaf 6
		echo -e " _${place//?/_}_" 
		for word in "${textarray[@]}"; do
			printf '| %s%*s%s |\n' "$(tput setaf 2)" "-$width" "$word" "$(tput setaf 6)"
		done
		echo -e "|_${place//?/_}_|"
		tput sgr 0
}
