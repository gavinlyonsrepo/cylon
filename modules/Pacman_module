#!/bin/bash
#Module containing functions called from cylon package
#Functions: pacmanFunc, pkglistFunc,updateFunc,checkPacFunc, DelQmFunc and rssFunc

#FUNCTION HEADER
# NAME : PacmanFunc
# DESCRIPTION : Pacman package manager options
# PROCESS : See options array
#NOTE gnu-netcat is needed for the first option.
function PacmanFunc 
{
clear
while true; do # loop until user exit
	msgFunc blue "Pacman package manager options:-"
	local choicePMVar=""
	local pacStingVar=""
	local optionsPMArr=("Check Network and check for pacman updates (no download)" "pacman -Syu Upgrade packages" \
	"pacman -Si Display information for a package in database" "pacman -S Install Package" \
	"pacman -Ss Search for packages in the database" \
	"pacman -Rs Remove Package" "pacman -Qs Search for already installed packages" \
	"pacman -Qi  Display information for locally installed packages" "pacman -Ql  List all files owned by a given package." \
	"pacman -Qkk Verify packages" "paccache -r Prune older packages from cache, Keep last 3"\
	"paccache -ruk0 To remove all cached versions of UNinstalled packages"\
	"Remove all packages not required as dependencies (orphans)" "Make a copy of package lists"  \
	"Back-up the local pacman database" "Arch Linux News Rss feed" "$(checkPacFunc arch-audit  NOMES)" \
	"pactree options" "Edit pacman config file" "View pacman log" "Return to main menu")
	select choicePMVar in "${optionsPMArr[@]}"
	do
	case "$choicePMVar" in
			"${optionsPMArr[0]}")
			msgFunc green "Pacman updates ready:-.... "
			#check gnu-netcat is installed
			#check network connectivity if good get updates numbers from arch
				checkNetFunc "archlinux.org"
				msgFunc norm   "Number of Pacman updates ready...> $(checkupdates | wc -l)"
				checkupdates
			;;
			"${optionsPMArr[1]}") #update pacman
				msgFunc green "Update system with Pacman."
				sudo pacman -Syu
			;;
			"${optionsPMArr[2]}") #pacman -Si Display extensive information about a given package
				msgFunc green "Display information  for Package."
				msgFunc norm "Please enter package name"
				read -r pacStingVar
				pacman -Si "$pacStingVar"
			;;
			"${optionsPMArr[3]}") #pacman -S Install Package
				msgFunc green "Install package."
				msgFunc norm "Please enter package name"
				read -r pacStingVar
				sudo pacman -S "$pacStingVar"
			;;
			"${optionsPMArr[4]}")   #pacman -Ss Search Repos for Package
				msgFunc green "Search for packages in the database."
				msgFunc norm "Please enter package name"
				read -r pacStingVar
				pacman -Ss "$pacStingVar"
			;;
			"${optionsPMArr[5]}") #pacman -Rs Delete Package
				msgFunc green "Remove Package."
				msgFunc norm "Please enter package name"
				read -r pacStingVar
				sudo pacman -Rs "$pacStingVar"
			;;
			"${optionsPMArr[6]}")   #pacman -Qs Search for already installed packages
				msgFunc green "Search for already installed packages."
				msgFunc norm "Please enter package name"
				read -r pacStingVar
				pacman -Qs "$pacStingVar"
			;;
			"${optionsPMArr[7]}") #pacman -Qi Display extensive information about a given package(local install)
				msgFunc green "Display information  for Package."
				msgFunc norm "Please enter package name"
				read -r pacStingVar
				pacman -Qi "$pacStingVar"
			;;
			"${optionsPMArr[8]}") #pacman -Ql  List all files owned by a given package.
				msgFunc green "List all files owned by a given package."
				msgFunc norm "Please enter package name"
				read -r pacStingVar
				pacman -Ql "$pacStingVar"
			;;
			"${optionsPMArr[9]}") #pacman -Qkk  Verify all packages
				echo " "
				makeDirFunc "-PKGINFO"
				msgFunc green "Verify  packages pacman -Qkk"
				msgFunc norm "Yes for just one package, no for all [y/n] ?"
				if msgFunc yesno
				then # yes
					msgFunc norm "Please enter package name"
					read -r pacStingVar
					pacman -Qkk "$pacStingVar" > pkgver
				else
					pacman -Qkk > pkgverall
				fi
			;;
			"${optionsPMArr[10]}")  msgFunc green  "Prune older packages from cache, paccache -r Keeps last 3"
			#The paccache script, deletes all cached  package 
				#regardless of whether they're installed or not, 
				#except for the most recent 3, 
				sudo paccache -r
			;;
			
			"${optionsPMArr[11]}")msgFunc green "paccache -ruk0 : To remove all cached versions of uninstalled packages"
			#To remove all cached versions of uninstalled packages, re-run paccache with: 
				sudo paccache -ruk0
			;;
			
			"${optionsPMArr[12]}")#delete orphans
				msgFunc green "Remove orphans!"
				#Remove all packages not required as dependencies (orphans)
				msgFunc norm "Number of orphans: $(pacman -Qtdq | wc -l)"
				if [ "$(pacman -Qtdq | wc -l)" = "0" ]
					then
					msgFunc yellow  "No orphans to remove."
				else
					pacman -Qtdq
					msgFunc norm "Do you want to remove them? [y/n]"
					if msgFunc yesno
					then
						sudo pacman -Rns $(pacman -Qtdq)
					fi
				fi
			;;

			"${optionsPMArr[13]}")
				msgFunc green "Make copy of package lists"
				pkglistFunc
			;;
			"${optionsPMArr[14]}") #backup the pacman database
				msgFunc green "Back-up the pacman database to :"
				makeDirFunc "-BACKUPPACMAN"
				tar -v -cjf pacman_database.tar.bz2 /var/lib/pacman/local
			;;
			
			"${optionsPMArr[15]}") #Arch Linux News Rss feed
				RssFunc
			;;
				
			"${optionsPMArr[16]}") #run arch audit
				msgFunc green "Running arch-audit program :"
				local archauditVar=""
				#check archaudit is installed
				if ! checkPacFunc arch-audit
					then
					msgFunc anykey 
					return
				fi
				msgFunc norm "Press [A] for full output: or other options> -q=quiet, -u=upgradable, -uq."
				read -r archauditVar
				if [ "$archauditVar" = "A" ] 
					then
					arch-audit
					else
					 arch-audit "$archauditVar"
				fi 
				archauditVar=
			;;
			
			"${optionsPMArr[17]}") #pactree
				local pactreeVar=""
				msgFunc green "pactree options"
				msgFunc norm "List a dependency tree of a package: pactree"
				msgFunc norm "Show packages that depend on the named package: pactree -r"
				msgFunc norm "press [A] for pactree or [r] for pactree -r. [A/r]"
				read -r pactreeVar
				if [ "$pactreeVar" != "r" ]
				then
					msgFunc norm "Please enter package name"
					read -r pacStingVar
					pactree "$pacStingVar"
				else
					msgFunc norm "Please enter package name"
					read -r pacStingVar
					pactree -r "$pacStingVar"
				fi
			;;
			"${optionsPMArr[18]}") #edit pacman conf file
				msgFunc green "Edit Pacman.conf file."
				sudo $EDITOR /etc/pacman.conf
			;;
			"${optionsPMArr[19]}") #view pacman log
				msgFunc green "View pacman log /var/log/pacman.log"
				sudo less /var/log/pacman.log
			;;
			
			*)  #exit  
				msgFunc green "Done!"	
				clear
				return
			;;
	esac
	break
	done
msgFunc green "Done!"	
msgFunc anykey
done
}

#FUNCTION HEADER
# NAME :  RssFunc
# DESCRIPTION : Display 4 Arch Linux News Rss feed
function RssFunc
{
	msgFunc green "Arch Linux News Rss feed"
	local newsVar countVar
	[ -z "${CYLON_RSS_NUM}" ] && CYLON_RSS_NUM=1
	[ -z "$CYLON_RSS_URL" ] && CYLON_RSS_URL="https://archlinux.org/feeds/news/" 
	
	intchkFunc "$CYLON_RSS_NUM"
	
	# Set CYLON_RSS_NUM" to N in awk  to be the number of latest news to fetch
	newsVar=$(echo -e $(curl --silent "$CYLON_RSS_URL" | awk -v N="$CYLON_RSS_NUM=" ' NR == 1 {countVar = N; while (countVar) {print;getline; if($0 ~ /<\/item>/) countVar=countVar-1} ; sub(/<\/item>.*/,"</item>") ;print}'))
	#  THE RSS PARSER Remove some tags 
	newsVar=$(echo -e "$newsVar" | \
	awk '{
	sub(/<lastBuildDate[^>]*>([^>]*>)/,"");sub(/<language[^>]*>([^>]*>)/,"");sub(/<title[^>]*>([^>]*>)/,"");sub(/<link[^>]*>([^>]*>)/,""); 
	while (sub(/<guid[^>]*>([^>]*>)/,"")); 
	while (sub(/<dc:creator[^>]*>([^>]*>)/,""));
	while (sub(/<description[^>]*>([^>]*>)/,"")); print }' | \
	sed -e ':a;N;$!ba;s/\n/ /g')
	echo -e "$(echo -e "$newsVar" | \
	sed -e 's/&amp;/\&/g
	s/&lt;\|&#60;/</g
	s/&gt;\|&#62;/>/g
	s/<\/a>/£/g
	s/href\=\"/§/g
	s/<title>/\\n\\n :: \\e[01;31m/g; s/<\/title>/\\e[00m ::/g
	s/<link>/\\n [ \\e[01;36m/g; s/<\/link>/\\e[00m ]\\n/g
	s/<p\( [^>]*\)\?>\|<br\s*\/\?>/\n/g
	s/<b\( [^>]*\)\?>\|<strong\( [^>]*\)\?>/\\e[01;30m/g; s/<\/b>\|<\/strong>/\\e[00;37m/g
	s/<i\( [^>]*\)\?>\|<em\( [^>]*\)\?>/\\e[41;37m/g; s/<\/i>\|<\/em>/\\e[00;37m/g
	s/<u\( [^>]*\)\?>/\\e[4;37m/g; s/<\/u>/\\e[00;37m/g
	s/<code\( [^>]*\)\?>/\\e[00m/g; s/<\/code>/\\e[00;37m/g
	s/<a[^§|t]*§\([^\"]*\)\"[^>]*>\([^£]*\)[^£]*£/\\e[01;31m\2\\e[00;37m \\e[01;34m[\\e[00;37m \\e[04m\1\\e[00;37m\\e[01;34m ]\\e[00;37m/g
	s/<li\( [^>]*\)\?>/\n \\e[01;34m*\\e[00;37m /g
	s/<!\[CDATA\[\|\]\]>//g
	s/\|>\s*<//g
	s/ *<[^>]\+> */ /g
	s/[<>£§]//g')"    
	#end
}

#FUNCTION HEADER
# NAME :   pkglistFunc
# DESCRIPTION :creates a copy of packages list see below.
#OUTPUT mutliple files see below
#NOTE called from pacman trizen auracle functions 
 # shellcheck disable=SC2120
function pkglistFunc
{
	clear
	msgFunc green "Making a copy of package lists"
	makeDirFunc "-PKGINFO"

	msgFunc norm "1: All .pacnew and .pacsave files : pacNewSaveFiles.txt" #1
	find / -path /run/media -prune -o -path /mnt -prune -o -regextype posix-extended -regex ".+\.pac(new|save)" \
	 -fprint pacNewSaveFiles.txt -exec echo -n "." \; 2> /dev/null 
	msgFunc norm " "
	
	msgFunc norm "2: All installed packages: pkgQ.txt" #2
	pacman -Q  > pkgQ.txt
	
	msgFunc norm "3: All native packages: pkgQn.txt"  #3
	pacman -Qn > pkgQn.txt
	
	msgFunc norm "4: All explicitly installed packages: pkgQe.txt"  #4
	pacman -Qe  > pkgQe.txt
	
	msgFunc norm "5: All explicitly installed native packages that are" #5
	msgFunc norm "not direct or optional dependencies: pkgQent.txt"
	pacman -Qent > pkgQent.txt
	
	msgFunc norm "6: All foreign installed packages: pkgQm.txt" #6
	pacman -Qm > pkgQm.txt
	
	msgFunc norm "7: All foreign explicitly installed packages: pkgQme.txt" #7
	pacman -Qme > pkgQme.txt
	
	msgFunc norm "8: All orphan packages not required as dependencies: pkgOpn.txt"
	pacman -Qtdq > pkgOpn.txt #8
	
	msgFunc norm "9: All modified by user system backup files : pkgSysBck.txt"
	pacman -Qii | awk '/^MODIFIED/ {print $2}' > pkgSysBck.txt  #9
	
	msgFunc norm "10: All packages installed as dependencies : pkgQd.txt"
	pacman -Qd > pkgQd.txt #10
	
	msgFunc norm "11: All explicitly installed native packages "
	msgFunc norm "quiet output for system restore : pkgQqne.txt"
	pacman -Qqne > pkgQqne.txt #11
	
	msgFunc norm "12: All packages that are optional dependencies "
	msgFunc norm "and not installed explicitly :pkgOptdep.txt"
	comm -13 <(pacman -Qdtq | sort) <(pacman -Qdttq | sort) > pkgOptdep.txt #12

	#expac
	msgFunc norm "13: All explicitly installed packages not in base-devel with size"
	msgFunc norm "and description: pkgNonBase.txt"
	expac -H M "%011m\t%-20n\t%10d" $(comm -23 <(pacman -Qqen | sort) <(pacman -Qqg base-devel | sort))\
	| sort -hr > pkgNonBase.txt #13
	
	msgFunc norm "14: All explicitly installed packages that are not direct or optional dependencies" 
	msgFunc norm "and not in base-devel with size and description: pkgexpNonBase.txt"
	expac -H M "%011m\t%-20n\t%10d" $(comm -23 <(pacman -Qqent | sort) <(pacman -Qqg base-devel | sort))\
	| sort -hr > pkgexpNonBase.txt #14
	
	msgFunc norm "15: All installed packages sorted by size: pkgSize.txt"
	expac -H M '%m\t%n' | sort -hr > pkgSize.txt #15
	
	msgFunc norm "16: All installed packages sorted by install/update date: pkgDate.txt"
	expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort -hr > pkgDate.txt #16
	
	msgFunc norm "17: All installed groups: pkgGroups.txt"
	expac -g '%G' | sort -u > pkgGroups.txt #17
	
	#paclist
	msgFunc norm "Packages by repositories:-"
	msgFunc norm "18: Core: $(paclist core > pkgCore.txt ) : pkgCore.txt" #18
	msgFunc norm "19: Extra: $(paclist extra > pkgExtra.txt ) : pkgExtra.txt" #19
	msgFunc norm "20: Community: $(paclist community > pkgComm.txt ) : pkgComm.txt" #20
	msgFunc norm "21: Multilib: $(paclist multilib > pkgMulib.txt ): pkgMulib.txt" #21
	
	msgFunc norm "22: All installed packages sorted by very first install date: pkginstall.txt" #22
	local pacQArr 
	pacQArr=$(pacman -Qq)
	IFS=$'\n' pacQArr=($(sort <<<"${pacQArr[*]}"))
	unset IFS
	# get length of an array
	tLen="${#pacQArr[@]}"
	for (( i=0; i<"${tLen}"; i++ ));
	do
		if [ $(( i % 100 )) -eq 0 ] 
		then
			echo -n  "."
		fi
		echo "${pacQArr[i]}" >> pkginstall.txt
		sed -n "/ installed ${pacQArr[i]} /{s/].*/]/p;q}" /var/log/pacman.log  >> pkginstall.txt
	done
	echo " "
	msgFunc norm "23: All development/unstable packages(cvs svn git hg bzr darcs) : pkgdevel.txt" #23
	pacman -Qq | awk '/^.+(-cvs|-svn|-git|-hg|-bzr|-darcs)$/' >> pkgdevel.txt
	
	if checkPacFunc flatpak #24
	then
		msgFunc norm "24: All flatpak packages installed: pkgFlatpak.txt"
		flatpak list > pkgFlatpak.txt
	else
		msgFunc norm "Skipping list number 24 as flatpak not installed"
	fi
	
	if checkPacFunc auracle #25
	then
		checkNetFunc "aur.archlinux.org"
		msgFunc norm "25: All foreign packages not in the AUR: pkgFNotAUR.txt" 
		for p in $(pacman -Qmq); do
			if [ -z "$(auracle info "$p")" ]; then
				echo -n "."
				echo "$p" >> pkgFNotAUR.txt
			fi
		done
		echo " "
	else
		msgFunc norm "Skipping list number 25 as auracle not installed"
	fi
	
	msgFunc norm "26: System packages list information summary : pkginfo.txt"  #26
	{
	echo "See https://github.com/gavinlyonsrepo/cylon/blob/master/documentation/package_lists.md"
	echo "or cylon information option on main menu for more information." 
	echo "Line count of package files:"
	wc -l ./*txt | head -n -1 | sort
	} >> pkginfo.txt
	
	msgFunc norm "Note: Packages files list generator help file can be accessed
	via the cylon information menu option on main screen"
}

##FUNCTION HEADER
# NAME :  updatefunc
# DESCRIPTION: called from checkinputfunc or main menu.
function updateFunc
{
	clear
	#check if arch-audit package  installed
	if ! checkPacFunc arch-audit
	then
		msgFunc anykey 
		clear
	return
	fi
	#check if auracle package  installed
	if ! checkPacFunc auracle
	then
		msgFunc anykey 
		clear
	return
	fi
	
	clear
	msgFunc line
	AsciiArtFunc "CYLON"
	msgFunc line
	msgFunc green "Accessing archlinux.org Network Database...."
	msgFunc line
	RssFunc
	msgFunc anykey
	msgFunc line
	msgFunc green "Arch-audit upgradable vulnerable packages"
	arch-audit -u 
	if [ -n "${arch-audit -u}" ]; then
		msgFunc norm "0"
	fi
	msgFunc anykey
	msgFunc line
	msgFunc green "Number of Pacman updates ready ..> "	
	checkupdates | tee /dev/tty | wc -l
	msgFunc line
	msgFunc green "Number of updates available for installed AUR packages ..> "
	auracle outdated | tee /dev/tty  | wc -l
	msgFunc line
	
	[ -z "${CYLON_UPDATE_CHOICE}" ] && CYLON_UPDATE_CHOICE=1
	case "$CYLON_UPDATE_CHOICE" in  
		1) 
			msgFunc norm "Update Arch Main Repos only"
			sudo pacman -Syu ;;
		2)
			msgFunc norm "Update All repos"
			sudo pacman -Syu
			aurupdateFunc
		;;
		3) 
			msgFunc norm "Update AUR only"
			aurupdateFunc 
			;;
		
		*)
			msgFunc red "Wrong value for CYLON_UPDATE_CHOICE must be 1-3" 
			msgFunc red "No updates done"
		;;
	
	esac
	msgFunc green "Done!"
}

#FUNCTION HEADER
# NAME : checkPacFunc
#DESCRIPTION : Checks if package installed 
#PROCESS: check if package(passed $1) installed if NOMES passed 
#as $2 goto menu display mode and appends passed $3
#NOMES =no message
# INPUTS : $1(package $2(NOMES flag) or (append text))
#OUTPUTS: returns 0 for installed 1 for not installed    
function checkPacFunc
{
	local pacVar=""
	pacVar=$(pacman -Qqs "$1")
	if [ -n "$pacVar" ]
	then #installed
		#if text input is NOMES skip install good message
		if [ "$2" = "NOMES" ] 
		then 
			printf '%s' "$1"
		else
			printf '%s\n' "$1 is Installed $2"
		fi
		return 0
	else #not installed
		#if text input is NOMES skip install bad message
		if [ "$2" = "NOMES" ] 
		then
			printf '%s' "$1 n/a"
		else
			printf '%s\n' "${RED}$1 is Not installed${NORMAL} $2"
		fi
		return 1
	fi 
}

